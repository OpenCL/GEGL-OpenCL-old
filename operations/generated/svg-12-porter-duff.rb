#!/usr/bin/env ruby
# encoding: utf-8

copyright = '
/* !!!! AUTOGENERATED FILE generated by svg-12-porter-duff.rb !!!!!
 *
 * This file is an image processing operation for GEGL
 *
 * GEGL is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * GEGL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GEGL; if not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2006, 2007 Øyvind Kolås <pippin@gimp.org>
 *            2007 John Marshall
 *            2013 Daniel Sabo
 *
 * SVG rendering modes; see:
 *     http://www.w3.org/TR/SVG12/rendering.html
 *     http://www.w3.org/TR/2004/WD-SVG12-20041027/rendering.html#comp-op-prop
 *
 *     aA = aux(src) alpha      aB = in(dst) alpha      aD = out alpha
 *     cA = aux(src) colour     cB = in(dst) colour     cD = out colour
 *
 * !!!! AUTOGENERATED FILE !!!!!
 */'

a = [
      ['clear',         '0.0f',
                        '0.0f',
       false],
      ['src',           'cA',
                        'aA',
       false],
      ['dst',           'cB',
                        'aB',
       true],
#      ['src_over',      'cA + cB * (1.0f - aA)',
#                        'aA + aB - aA * aB',
#       false],
      ['dst_over',      'cB + cA * (1.0f - aB)',
                        'aA + aB - aA * aB',
       true],
      ['dst_in',        'cB * aA', # <- XXX: typo?
                        'aA * aB',
       false],
      ['src_out',       'cA * (1.0f - aB)',
                        'aA * (1.0f - aB)',
       false],
      ['dst_out',       'cB * (1.0f - aA)',
                        'aB * (1.0f - aA)',
       true],
      ['src_atop',      'cA * aB + cB * (1.0f - aA)',
                        'aB',
       true],

      ['dst_atop',      'cB * aA + cA * (1.0f - aB)',
                        'aA',
       false],
      ['xor',           'cA * (1.0f - aB)+ cB * (1.0f - aA)',
                        'aA + aB - 2.0f * aA * aB',
       true],
    ]

b = [ ['src_in',        'cA * aB',  # the bounding box of this mode is the
                        'aA * aB']]  # bounding box of the input only.

file_head1 = '
#include "config.h"
#include <glib/gi18n-lib.h>


#ifdef GEGL_PROPERTIES

property_boolean (srgb, _("sRGB"), FALSE)
    description (_("Use sRGB gamma instead of linear"))

#else
'

file_head2 = '
static void prepare (GeglOperation *operation)
{
  const Babl *format;

  if (GEGL_PROPERTIES (operation)->srgb)
    format = babl_format ("R\'aG\'aB\'aA float");
  else
    format = babl_format ("RaGaBaA float");

  gegl_operation_set_format (operation, "input", format);
  gegl_operation_set_format (operation, "aux", format);
  gegl_operation_set_format (operation, "output", format);
}

static gboolean
process (GeglOperation        *op,
         void                *in_buf,
         void                *aux_buf,
         void                *out_buf,
         glong                n_pixels,
         const GeglRectangle *roi,
         gint                 level)
{
  gint i;
  gfloat * GEGL_ALIGNED in = in_buf;
  gfloat * GEGL_ALIGNED aux = aux_buf;
  gfloat * GEGL_ALIGNED out = out_buf;
'

file_tail1 = '

static void
gegl_op_class_init (GeglOpClass *klass)
{
  GeglOperationClass              *operation_class;
  GeglOperationPointComposerClass *point_composer_class;

  operation_class      = GEGL_OPERATION_CLASS (klass);
  point_composer_class = GEGL_OPERATION_POINT_COMPOSER_CLASS (klass);

  point_composer_class->process = process;
  operation_class->prepare = prepare;

'

file_tail2 = ' 

}

#endif
'

a.each do
    |item|

    name     = item[0] + ''
    name.gsub!(/_/, '-')
    filename = name + '.c'

    puts "generating #{filename}"
    file = File.open(filename, 'w')

    capitalized = name.capitalize
    swapcased   = name.swapcase
    c_formula   = item[1]
    a_formula   = item[2]

    file.write copyright
    file.write file_head1
    file.write "
#define GEGL_OP_POINT_COMPOSER
#define GEGL_OP_C_FILE        \"#{filename}\"

#include \"gegl-op.h\"
"
    file.write file_head2

    if item[3]
      file.write "
  if (!aux)
    {
      for (i = 0; i < n_pixels; i++)
        {
          gint   j;
          gfloat aA G_GNUC_UNUSED, aB G_GNUC_UNUSED, aD G_GNUC_UNUSED;

          aB = in[3];
          aA = 0.0f;
          aD = #{a_formula};

          for (j = 0; j < 3; j++)
            {
              gfloat cA G_GNUC_UNUSED, cB G_GNUC_UNUSED;

              cB = in[j];
              cA = 0.0f;
              out[j] = #{c_formula};
            }
          out[3] = aD;
          in  += 4;
          out += 4;
        }
    }
  else"
    else
      file.write "
  if (!aux)
    return TRUE;
  else"
    end

    file.write "
    {
      for (i = 0; i < n_pixels; i++)
        {
          gint   j;
          gfloat aA G_GNUC_UNUSED, aB G_GNUC_UNUSED, aD G_GNUC_UNUSED;

          aB = in[3];
          aA = aux[3];
          aD = #{a_formula};

          for (j = 0; j < 3; j++)
            {
              gfloat cA G_GNUC_UNUSED, cB G_GNUC_UNUSED;

              cB = in[j];
              cA = aux[j];
              out[j] = #{c_formula};
            }
          out[3] = aD;
          in  += 4;
          aux += 4;
          out += 4;
        }
    }
  return TRUE;
}
"
  file.write file_tail1
  file.write "
  gegl_operation_class_set_keys (operation_class,
    \"name\"       , \"svg:#{name}\",
    \"compat-name\", \"gegl:#{name}\",
    \"title\"      , \"#{name.capitalize}\",
    \"categories\" , \"compositors:porter-duff\",
    \"description\",
        _(\"Porter Duff operation #{name} (d = #{c_formula})\"),
        NULL);
"
  file.write file_tail2
  file.close
end





b.each do
    |item|

    name     = item[0] + ''
    name.gsub!(/_/, '-')
    filename = name + '.c'

    puts "generating #{filename}"
    file = File.open(filename, 'w')

    capitalized = name.capitalize
    swapcased   = name.swapcase
    c_formula   = item[1]
    a_formula   = item[2]

    file.write copyright
    file.write file_head1
    file.write "
#define GEGL_OP_POINT_COMPOSER
#define GEGL_OP_C_FILE        \"#{filename}\"

#include \"gegl-op.h\"
"
    file.write file_head2
    file.write "
  if (!aux)
    return TRUE;

  for (i = 0; i < n_pixels; i++)
    {
      gint   j;
      gfloat aA G_GNUC_UNUSED, aB G_GNUC_UNUSED, aD G_GNUC_UNUSED;

      aB = in[3];
      aA = aux[3];
      aD = #{a_formula};

      for (j = 0; j < 3; j++)
        {
          gfloat cA G_GNUC_UNUSED, cB G_GNUC_UNUSED;

          cB = in[j];
          cA = aux[j];
          out[j] = #{c_formula};
        }
      out[3] = aD;
      in  += 4;
      aux += 4;
      out += 4;
    }
  return TRUE;
}

static GeglRectangle get_bounding_box (GeglOperation *self)
{
  GeglRectangle *in_rect = gegl_operation_source_get_bounding_box (self, \"input\");
  return *in_rect;
}


"
  file.write file_tail1
  file.write "
  operation_class->get_bounding_box = get_bounding_box;

  gegl_operation_class_set_keys (operation_class,
  \"name\"      , \"svg:#{name}\",
  \"compat-name\", \"gegl:#{name}\",
  \"title\"     , \"#{name.capitalize}\",
  \"categories\", \"compositors:porter-duff\",
  \"description\" ,
        _(\"Porter Duff compositing operation #{name} (formula:   #{c_formula})\"),
        NULL);
"
  file.write file_tail2
  file.close
end
